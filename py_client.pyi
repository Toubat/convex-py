# py_client.pyi

# These types are defined in `crates/py_client/src/client/mod.rs` and `crates/py_client/src/client/subscription.rs`.
# Types in this file will need to be manually updated when these pyo3-annotated structs change.

from typing import Any, Awaitable, Dict, Optional

class PyQuerySubscription:
    def exists(self) -> bool: ...

    @property
    def id(self) -> Any: ...

    def unsubscribe(self) -> None: ...

    def next(self) -> Optional[Dict[Any, Any]]: ...

    def anext(self) -> Awaitable[Optional[Dict[Any, Any]]]: ...

class PyQuerySetSubscription:
    def exists(self) -> bool: ...

    def next(self) -> Optional[Dict[Any, Any]]: ...

    def anext(self) -> Awaitable[Optional[Dict[Any, Any]]]: ...


class PyConvexClient:
    def subscribe(self, name: str, args: Optional[Dict]) -> Any: ...

    def __new__(cls, deployment_url: str) -> PyConvexClient: ...

    def subscribe(self, name: str, args: Optional[Dict[str, Any]] = None) -> PyQuerySubscription: ...

    def query(self, name: str, args: Optional[Dict[str, Any]] = None) -> Any: ...

    def mutation(self, name: str, args: Optional[Dict[str, Any]] = None) -> Any: ...

    def action(self, name: str, args: Optional[Dict[str, Any]] = None) -> Any: ...

    def watch_all(self) -> PyQuerySetSubscription: ...

    def set_auth(self, token: Optional[str]) -> None: ...


class ConvexError(Exception):
     
    @property
    def data(self) -> Any: ...

    def __new__(cls, message: str, data: Any) -> ConvexError: ...